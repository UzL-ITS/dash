/*
 * Copyright (C) 2011-2021 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

enclave {
    from "sgx_pthread.edl" import *;
    from "sgx_tstdc.edl" import *;
    include "../../dash/include/misc/datatypes_c.h"

    trusted {
        public void ecall_ann_infer([user_check] void* inputs);
    };
    untrusted {
        raw_data_t ocall_read_file([in, string] const char* path);
        
        void ocall_cuda_print_g_inputs([user_check] crt_val_t** g_inputs,
                                       [in, count=crt_base_size] crt_val_t* crt_base,
                                       int crt_base_size,
                                       int nr_inputs);
        void ocall_print_string([in, string] const char *str);

        void* ocall_alloc_array(size_t size);
        void** ocall_alloc_ptr_array(size_t size);

        void* ocall_cudaMalloc(size_t size);
        void ocall_cudaFree([user_check] void* ptr);
        void ocall_cudaMemcpyToDevice([user_check] void* dst,
                                         [user_check] void* src,
                                         size_t size);
        void ocall_cudaMemcpyToDevicePtr([user_check] void** dst,
                                         [user_check] void** src, size_t size);
        void* ocall_cudaMemcpyFromDevice([user_check] void* src,
                                         size_t size);
        void ocall_free([user_check] void* ptr);

        void ocall_cuda_eval_dense([user_check] crt_val_t** dev_out_label,
                                   [user_check] crt_val_t** dev_in_label,
                                   [user_check] q_val_t* dev_qe_weights,
                                   [user_check] crt_val_t** dev_qe_bias_label,
                                   [user_check] crt_val_t** dev_zero_label,
                                   int crt_base_size, size_t M, size_t K,
                                   [in, count=crt_base_size] crt_val_t* crt_base);

        void ocall_cuda_eval_conv2d([user_check] crt_val_t** dev_out_label,
                                    [user_check] crt_val_t** dev_in_label,
                                    [user_check] q_val_t* dev_qe_weights,
                                    [user_check] crt_val_t** dev_qe_bias_label,
                                    [user_check] crt_val_t** dev_zero_label,
                                    int crt_base_size,
                                    [in, count=crt_base_size] crt_val_t* crt_base,
                                    size_t output_width, size_t output_height,
                                    size_t input_width, size_t input_height,
                                    size_t channel, size_t filter, size_t filter_width,
                                    size_t filter_height, size_t stride_width,
                                    size_t stride_height);

        void ocall_init_cuda_aes_engine();

        void ocall_sign_mult([user_check] crt_val_t** dev_out_label,
                             [user_check] crt_val_t** dev_in_label,
                             [user_check] crt_val_t** dev_out_label_sign,
                             [user_check] void* dev_garbler_ciphers,
                             [user_check] void* dev_evaluator_ciphers,
                             size_t input_size,
                             size_t crt_base_size,
                             size_t crt_base_sum,
                             [in, count=crt_base_size] crt_val_t* crt_base);

        void ocall_cuda_eval_sign([user_check] crt_val_t* dev_mrs_label,
                                  [user_check] crt_val_t** dev_in_label,
                                  size_t input_size,
                                  size_t output_size,
                                  [user_check] __uint128_t* dev_approx_res_ciphers,
                                  [user_check] mrs_val_t* dev_mrs_base,
                                  size_t mrs_base_size,
                                  int mrs_base_nr_comps,
                                  size_t crt_base_size,
                                  int crt_base_sum,
                                  [in, count=crt_base_size] crt_val_t* crt_base,
                             
                                  [user_check] crt_val_t* dev_mrs_sum_most_sig_label,
                                  int partial_mrs_base_sum,
                                  [user_check] crt_val_t** dev_dev_zero_label,
                                  [user_check] __uint128_t* dev_1_cast_ciphers,
                                  [user_check] __uint128_t* dev_2_cast_ciphers,
                             
                                  [user_check] crt_val_t** dev_out_label,
                                  [user_check] __uint128_t* dev_sign_ciphers,
                                  
                                  size_t nr_out_moduli,
                                  [in, count=nr_out_moduli] crt_val_t* out_moduli);

        void ocall_eval_rescale([user_check] crt_val_t** dev_out_label,
                                [user_check] crt_val_t** dev_in_label,
                                [user_check] crt_val_t** dev_upshift_labels,
                                [user_check] crt_val_t* dev_zero_label,
                                [user_check] __uint128_t* dev_trans_mod_ciphers,
                                [in, count=crt_base_size] crt_val_t* crt_base,
                                size_t crt_base_size,
                                size_t input_size);

        void ocall_eval_rescale2([user_check] crt_val_t** dev_out_label,
                                 [user_check] crt_val_t* dev_sign_out_0,
                                 [user_check] crt_val_t** dev_downshift_labels,
                                 size_t input_size,
                                 [in, count=crt_base_size] crt_val_t* crt_base,
                                 size_t crt_base_size);
    };
};
